#include "Physics.h"

Physics::~Physics() {}

// Initialize statically accessible entities.
b2World Physics::world = b2World(b2Vec2(0.0f, -10.0f));

Physics::Physics(EventManager * eventManager, vector<Entity *> * entities) :
	eventManager(eventManager),
	entities(entities),
	logger("Physics")
{}

void Physics::Update() {
	logger.Info("Updating physics subsystem.");

	// TODO: Rename 'HandleEvents'?
	CheckForEvents();

	// Update physics objects attached to the world (which is all entities with physics data).
	int32 velocityIterations = 6;
	int32 positionIterations = 2;

	float32 timeStep = 1.0f / 60.0f;
	world.Step(timeStep, velocityIterations, positionIterations);
}

void Physics::CheckForEvents()
{
	logger.Info("Checking for messages in physics subsystem.");

	// Search event queue for messages that pertain to this sub-system.
	vector<Event *> eventQueue = eventManager->GetEventQueue();
	for (int i = 0; i < eventQueue.size(); i++) {
		Event * e = eventQueue.at(i);
		vector<Event::Subsystem> subsystems = e->subsystems;
		
		if (find(subsystems.begin(), subsystems.end(), Event::Subsystem::PHYSICS) != subsystems.end()) {
			HandleEvent(e);
		}
	}
}

void Physics::HandleEvent(Event * e) {
	logger.Debug("Handling event.");
	
	// TODO: Switch to interfaced mapping of event codes to functions.
	switch (e->type) {
	case Event::EventType::MOVE_UP:
	case Event::EventType::MOVE_LEFT:
	case Event::EventType::MOVE_DOWN:
	case Event::EventType::MOVE_RIGHT:
		HandleMovementEvent(e);
		break;
	}

	// Inform the manager that we are finished with the event.
	eventManager->MarkAsHandled(e, Event::Subsystem::PHYSICS);
}

void Physics::HandleMovementEvent(Event * e) {
	int forceAmount = 50;
	b2Vec2 force;

	switch (e->type) {
	case Event::EventType::MOVE_UP:
		force = b2Vec2(0, forceAmount);
		break;
	case Event::EventType::MOVE_LEFT:
		force = b2Vec2(forceAmount, 0);
		break;
	case Event::EventType::MOVE_DOWN:
		force = b2Vec2(0, -forceAmount);
		break;
	case Event::EventType::MOVE_RIGHT:
		force = b2Vec2(-forceAmount, 0);
		break;
	}

	// TODO: Take entity from event generated by game from input.
	b2Body * body = entities->at(1)->GetPhysicsData()->GetBody();
	body->ApplyForce(force, body->GetWorldCenter(), true);
}
