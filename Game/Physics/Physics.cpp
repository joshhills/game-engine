#include "Physics.h"

Physics::~Physics() {}

// Initialize statically accessible entities.
// TODO: Comment describe what these are used for.
b2World Physics::world = b2World(b2Vec2(0.0f, -10.0f));

Physics::Physics(EventManager * eventManager, vector<Entity *> * entities) :
	Subsystem("Physics", Event::PHYSICS, eventManager),
	entities(entities)
{}

void Physics::Update() {
	logger.Info("Updating physics subsystem.");

	HandleEvents();

	// Update physics objects attached to the world (ergo all physics data by proxy of 'world').
	world.Step(timeStep, velocityIterations, positionIterations);

	// Update common interface.
	// TODO: Create method?
	for (auto entity : *entities) {
		// TODO: Make a constructor for gameobject that takes a physics data?
		GameObject * gameObject = entity->GetGameObject();
		PhysicsData * physicsData = entity->GetPhysicsData();

		// Position.
		b2Vec2 position = physicsData->GetBody()->GetPosition();
		gameObject->x = position.x;
		gameObject->y = position.y;

		// Rotation.
		gameObject->rotation = physicsData->GetBody()->GetAngle();
	}
}

void Physics::HandleEvent(Event * e) {
	logger.Debug("Handling event.");
	
	// TODO: Switch to interfaced mapping of event codes to functions.
	switch (e->type)
	{
		case Event::EventType::MOVE_UP:
		case Event::EventType::MOVE_LEFT:
		case Event::EventType::MOVE_DOWN:
		case Event::EventType::MOVE_RIGHT:
			HandleMovementEvent(e);
			break;
	}

	// Inform the manager that we are finished with the event.
	eventManager->MarkAsHandled(e, Event::PHYSICS);
}

void Physics::HandleMovementEvent(Event * e) {
	int forceAmount = 50;
	b2Vec2 force;

	switch (e->type) {
	case Event::EventType::MOVE_UP:
		force = b2Vec2(0, forceAmount);
		break;
	case Event::EventType::MOVE_LEFT:
		force = b2Vec2(forceAmount, 0);
		break;
	case Event::EventType::MOVE_DOWN:
		force = b2Vec2(0, -forceAmount);
		break;
	case Event::EventType::MOVE_RIGHT:
		force = b2Vec2(-forceAmount, 0);
		break;
	}

	// TODO: Take entity from event generated by game from input.
	b2Body * body = entities->at(1)->GetPhysicsData()->GetBody();
	body->ApplyForce(force, body->GetWorldCenter(), true);
}
